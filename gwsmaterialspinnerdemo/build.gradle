apply plugin: 'com.android.application'
apply plugin: 'de.hannesstruss.godot'
apply plugin: 'hugo'
apply plugin: 'spoon'

android {
    compileSdkVersion rootProject.ext.getAt("androidCompileSdkVersion")
    buildToolsVersion rootProject.ext.getAt("androidBuildToolsVersion")


    defaultConfig {
        applicationId "com.grottworkshop.gwsmaterialspinnerdemo"
        minSdkVersion rootProject.ext.getAt("androidMinSdkVersion")
        targetSdkVersion rootProject.ext.getAt("androidMinSdkVersion")

        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    packagingOptions {
        exclude 'LICENSE.txt'
    }
    lintOptions {
        abortOnError false
    }


    aaptOptions {
        noCompress 'txt'
        ignoreAssetsPattern "!.svn:!.git:!.ds_store:!*.scc:.*:<dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"
    }

    signingConfigs {

        release {
            //props stored in gradle.properties at userhome .gradle subfolder

            storeFile file(FREDGROTT_RELEASE_STORE_FILE)
            storePassword FREDGROTT_RELEASE_STORE_PASSWORD
            keyAlias FREDGROTT_RELEASE_KEY_ALIAS
            keyPassword FREDGROTT_RELEASE_KEY_PASSWORD
        }

    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    testOptions {
        //puts instrumented test results in reports/androidTests
        //unit tests are in reports/tests
        reportDir = "$rootProject.ext.ourReportsDir/androidTests"
        unitTests.all {
            testLogging {
                events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            }
        }
    }

    jacoco {
        version = rootProject.ext.getAt("jacocoVersion")
    }

    buildTypes {

        debug{
            debuggable true
            minifyEnabled false
            testCoverageEnabled true

        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

spoon {

    debug = true

    baseOutputDir = file("$rootProject.ext.ourReportsDir/spoon")

    if (project.hasProperty('spoonClassName')) {
        className = project.spoonClassName

        if (project.hasProperty('spoonMethodName')) {
            methodName = project.spoonMethodName
        }
    }

}

//noinspection GroovyAssignabilityCheck
configurations.all {
    resolutionStrategy.force 'com.android.support:support-annotations:22.2.0'
}


dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile rootProject.ext.tddJunitDependencies.junit
    testCompile rootProject.ext.tddJunitDependencies.mockito
    compile rootProject.ext.androidSupportDependencies.appCompat
    compile project(":gwsmaterialspinner")
    debugCompile rootProject.ext.appDependencies.leakcanaryAndroidDC
    releaseCompile rootProject.ext.appDependencies.leakcanaryAndroidNOOPRC
    compile rootProject.ext.appDependencies.timber
    compile rootProject.ext.appDependencies.timberLint
    androidTestCompile rootProject.ext.instrumentedTestDependencies.espressoContrib
    androidTestCompile rootProject.ext.instrumentedTestDependencies.espressoCore
    androidTestCompile rootProject.ext.instrumentedTestDependencies.espressoRunner
    androidTestCompile rootProject.ext.instrumentedTestDependencies.spoonClient
    compile rootProject.ext.regularDependencies.butterknife
    compile rootProject.ext.appDependencies.otto
    androidTestCompile(rootProject.ext.instrumentedTestDependencies.assertjAndroid){
        exclude group: 'com.android.support'
    }
    androidTestCompile(rootProject.ext.instrumentedTestDependencies.assertjAppCompat){
        exclude group: 'com.android.support'
    }
}
